;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  TRANSMILENIO ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to setuptrans
  
  let Portales.id sort [id] of nodos with [tipo = "PORT"]
  let Portales.who sort [who] of nodos with [tipo = "PORT"] ;[387 391 398 412 430 441 458 469 482]


  set portalesTo sort [who] of nodos with [tipo = "PORT"]
  
  foreach Portales.who [ 
    n -> create-transmilenio length all_portales - 1 [
      set shape "truck"
      set color red           

      setxy [xcor] of nodo n [ycor] of nodo n
      set direct "DOWN"     
      set size 0.6
      set path [];list ("x") (origen.stop)
      set recorridos 0
       
    
      
      ]  
  ]
    
    foreach Portales.who [
      m -> 
      (foreach (sort [who] of transmilenio-on nodo m ) (remove m portalesTo)
        [ [o p] -> ask articulado o [
;          set portalesTo remove m portalesTo
          set portOri nodo m
          set portDest nodo p
          set origen.stop portOri 
          set genes m
          set apoc p
          set name_route word [id] of portOri [id] of portDest
        ]
      ])
    ]
end

to setup_transmi_med_fast
  let gen_x_route sort [genes] of transmilenio
  let apoc_x_route sort [apoc] of transmilenio
  let nameR_x_route sort [name_route] of transmilenio
  let who_x_route sort [who] of transmilenio
  
;  foreach gen_x_route [
  (foreach (gen_x_route )(who_x_route )(nameR_x_route) [
    [g w n] ->
    create-t_easy 1 [
      set shape "truck"
      set color yellow
      setxy [xcor] of nodo g [ycor] of nodo g
      set pass_capacity bus_capacity
      set on_board 0
      set id_pass []
      set cap_status "empty";capacity status   
      set size 0.6
      set portOri nodo [genes] of articulado w
      set portDest nodo [apoc] of articulado w
      set origen.stop portOri 
      set path  [path] of articulado w
      set route path
      set recorridos 0
      set direCt "DOWN"
      set name_route (word "e" n "-" who)
      set genes [genes] of articulado w
      set apoc [apoc] of articulado w
;      set freq_fast round ((length path) / ((length path) mod ( ((length path) * fast_freq))))
;      foreach path [
;        b ->
;        if ((position b path + 1) mod freq_fast) = 0 [
;          set route lput b route
;        ]
;      ]
      set route fput portOri route
      set route lput portDest route
      set route remove-duplicates route
      if portOri = last path [set path reverse path set route path set route fput portOri route]
      set next.stop item (position origen.stop route ) route 
    ]
    create-t_middle 1 [
      set shape "truck"
      set color gray
      setxy [xcor] of nodo g [ycor] of nodo g
      set pass_capacity bus_capacity   
      set on_board 0
      set id_pass []
      set cap_status "empty";capacity status
      set size 0.6
      set portOri nodo [genes] of articulado w
      set portDest nodo [apoc] of articulado w
      set origen.stop portOri 
      set path but-last [path] of articulado w
      set route []
      set recorridos 0
      set direCt "DOWN"
      set name_route (word "m" n "-" who)
      set genes [genes] of articulado w
      set apoc [apoc] of articulado w
      set freq_middle floor ((length path) / ((length path) mod (((length path) * mid_freq))))
;      show freq_middle
      foreach path [
        b ->
        if ((position b path + 1) mod freq_middle) = 0 [
          set route lput b route
        ]
      ]
      set route fput portOri route
      set route lput portDest route
      set route remove-duplicates route
      set next.stop item (position origen.stop route ) route 
    ]
    create-t_fast 1 [
      set shape "truck"
      set color green
      setxy [xcor] of nodo g [ycor] of nodo g
      set pass_capacity bus_capacity   
      set on_board 0
      set id_pass []
      set cap_status "empty";capacity status
      set size 0.6
      set portOri nodo [genes] of articulado w
      set portDest nodo [apoc] of articulado w
      set origen.stop portOri 
      set path but-last [path] of articulado w
      set route []
      set recorridos 0
      set direCt "DOWN"
      set name_route (word "f" n "-" who)
      set genes [genes] of articulado w
      set apoc [apoc] of articulado w
      set freq_fast round ((length path) / ((length path) mod ( ((length path) * fast_freq))))
      foreach path [
        b ->
        if ((position b path + 1) mod freq_fast) = 0 [
          set route lput b route
        ]
      ]
      set route fput portOri route
      set route lput portDest route
      set route remove-duplicates route
      set next.stop item (position origen.stop route ) route 
    ]
  ])
  
  
  
end

to setup-tm_on_demand
  create-t_easy #_easy [
    setxy random-xcor random-ycor
    set shape "truck"
    set color yellow
    set size 0.6
;    set inicio one-of vertices
    set pass_capacity bus_capacity   
    set cap_status "empty";capacity status
;    setxy [xcor] of portOri [ycor] of portOri
    set od_dest place_from_gaussian_mixture 0 0 -1 gm_dest 
     
		span_from_gaussian_mixture 0 0 -1 gm_org
    set od_ori current_nodo 
;    set current_nodo
    set origen.stop current_nodo
    set on_demand_route [name_route] of transmilenio with [member? od_ori path and member? od_dest path]
;    ask transmilenio [if member? (current_nodo) path and member? (portDest) path [set on_demand_route lput name_route on_demand_route ]]
    let name_route_1 item 0 shuffle on_demand_route    
    let whoRouteRef item 0 [who] of transmilenio with [name_route = name_route_1]
    set path [path] of articulado whoRouteRef
    set portOri nodo [genes] of articulado whoRouteRef
    set portDest nodo [apoc] of articulado whoRouteRef
    set genes od_ori
    set apoc od_dest
    set path remove portOri path  set path remove portDest path
    set path fput portOri path set path lput portDest path
    set name_route (name_route_1) 
    set route path
    set recorridos 0    
    ifelse position origen.stop route + 1 >= length route [
      set next.stop origen.stop
    ][
      set next.stop item (position origen.stop route + 1) route
    ]
    set od_ori 0
    set od_dest 0
    set optionsRoute on_demand_route
    if length on_demand_route = 0 [user-message (word "bus " who " murio") die ]
    show who show optionsRoute
    set on_demand_route 0
;    set inicio vertex 56
;    set llegada vertex 53
    
  ]
end




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  PROCEDIMIENTOS TRANSMILENIO   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to move-articulado
  
;  if [direct] of transmilenio = "DOWN";any? vertices with [direct = "DOWN"] = TRUE
  let Portales.id sort [id] of nodos with [tipo = "PORT"]  ;[56	60	67	81	99	110	127	138	151]
  let Portales.who sort [who] of nodos with [tipo = "PORT"]
  let connector.id sort [id] of nodos with [tipo = "ORI"];[0 11 19 26  37 41 50 53] 
  let connector.who sort [who] of nodos with [tipo = "ORI"]
  let connector.path [
    [419	422	366	366	366	366	366	366	366] ;366
    [375	375	377	381	381	381	378	381	381] ;
    [377	377	426	377	377	377	377	377	377] ;426
    [380	380	390	380	380	405	394	405	405] ;
    [383	383	383	433	447	403	403	403	403] ;37
    [404	404	405	404	404	465	407	407	407] ;41
    [401	401 401 401 401 401 476	416	416] ;50
    [417	417	417	414	414	414	417	493	504];53
  ]

  
  ;;;;;;; ARTICULADOS BAJANDO ;;;;;;;;;;;;;;
  
  ask transmilenio with [direct = "DOWN"]  
  [
    ifelse member? [id] of origen.stop  connector.id  = TRUE
    [      
      let connector.position position [who] of origen.stop connector.who ; posicion del conector en el arreglo
      let destination.position position [who] of portDest Portales.who ; posicion del portal de destino en el arreglo
      let nodo_salida nodo item 0 [who] of nodos with [id = item destination.position item connector.position connector.path]
      set next.stop nodo_salida 
      let next.stop_x [xcor] of next.stop
      let next.stop_y [ycor] of next.stop
      ;;; PRUEBA
;      face next.stop
;      fd 0.2
      ;;;
      facexy next.stop_x next.stop_y 
      fd distance next.stop
      ifelse [who] of origen.stop < [who] of next.stop 
      [
        set direct "UP"
      ]
      [
        set direct "DOWN"
      ]
      set last.stop origen.stop
      set origen.stop next.stop
      set path lput origen.stop path ;;;;;;
      set path remove-duplicates path
      
    ]
    [
      let origen origen.stop
      
      
      set next.stop item 0 [end1] of edges_tm with [end2 = origen and capacity = 4];of transmilenio]
                                                                ;      set options.stop  [end2] of links with [end1 = id.origen.stop ]
      let next.stop_x [xcor] of next.stop
      let next.stop_y [ycor] of next.stop
      ;;; PRUEBA
;      face next.stop
;      fd 0.2
      ;;;
      facexy next.stop_x next.stop_y 
      fd distance next.stop
      set last.stop origen.stop
      set origen.stop next.stop
      set next.stop item 0 [end1] of links with [end2 = origen ]
      set path lput origen.stop path ;;;;;;
      set path remove-duplicates path
     
    ]
    set path remove-duplicates path
     ]
  
  ;;;;;;; ARTICULADOS SUBIENDO;;;;;;;;;;;;;;
  
  ask transmilenio with [direct = "UP"]  
  [
    ifelse member? [who] of origen.stop  connector.who  = TRUE
    [      
      let connector.position position [who] of origen.stop connector.who ; posicion del conector en el arreglo
      let destination.position position [who] of portDest Portales.who ; posicion del portal de destino en el arreglo
      let nodo_salida nodo item 0 [who] of nodos with [id = item destination.position item connector.position connector.path]
      set next.stop nodo_salida 
;      set next.stop nodo  (item destination.position item connector.position connector.path);nodo item destination.position item connector.position connector.path
      let next.stop_x [xcor] of next.stop
      let next.stop_y [ycor] of next.stop
      ;;; PRUEBA
;      face next.stop
;      fd 0.2
      ;;;
      facexy next.stop_x next.stop_y fd distance next.stop
      ifelse [who] of origen.stop < [who] of next.stop 
      [
        set direct "UP"
      ]
      [
        set direct "DOWN"
      ]
      set last.stop origen.stop
      set origen.stop next.stop
      set path lput origen.stop path ;;;;;;
      set path remove-duplicates path

      
    ]
    [
      let origen origen.stop
      
      
      set next.stop item 0 [end2] of edges_tm with [end1 = origen and capacity = 4];of transmilenio]
                                                                ;      set options.stop  [end2] of links with [end1 = id.origen.stop ]
      let next.stop_x [xcor] of next.stop
      let next.stop_y [ycor] of next.stop
      ;;; PRUEBA
;      face next.stop
;      fd 0.2
      ;;;
      facexy next.stop_x next.stop_y fd distance next.stop
      set last.stop origen.stop
      set origen.stop next.stop
      set next.stop item 0 [end2] of links with [end1 = origen ]
      set path lput origen.stop path ;;;;;;
      set path remove-duplicates path
      
      
    ]
    set path remove-duplicates path
    
     ]
 
    ;;;;;;; RUTA FACIL;;;;;;;;;;;;;;
  
  ask t_easy [
;    let origen origen.stop      
;    set next.stop item (position origen route ) route
    let next.stop_x [xcor] of next.stop
    let next.stop_y [ycor] of next.stop
    ;;; PRUEBA
;      face next.stop
;      fd 0.2
    ;;;
    facexy next.stop_x next.stop_y fd distance next.stop
;    fd distance next.stop
;    set heading towards next.stop
;    forward 1.0E-500
;		move-to next.stop
    set last.stop origen.stop
    set origen.stop next.stop    
;    ifelse portdest != origen.stop [set next.stop item (position next.stop route + 1) route][]
    ifelse position origen.stop route + 1 >= length route [
      set next.stop origen.stop
    ][
      set next.stop item (position origen.stop route + 1) route
    ]
    ifelse [who] of origen.stop < [who] of next.stop 
      [
        set direct "UP"
      ]
      [
        set direct "DOWN"
      ]
    ability-level

  ] 
  
   ;;;;;;; RUTA MEDIA;;;;;;;;;;;;;;
  
  ask t_middle [
;    let origen origen.stop      
;    set next.stop item (position origen route ) route
    let next.stop_x [xcor] of next.stop
    let next.stop_y [ycor] of next.stop
    ;;; PRUEBA
;      face next.stop
;      fd 0.2
    ;;;
    facexy next.stop_x next.stop_y fd distance next.stop
;    fd distance next.stop
;    set heading towards next.stop
;    forward 1.0E-500
;		move-to next.stop
    set last.stop origen.stop
    set origen.stop next.stop
    ifelse portdest != origen.stop [set next.stop item (position next.stop route + 1) route][]
    ifelse [who] of origen.stop < [who] of next.stop 
      [
        set direct "UP"
      ]
      [
        set direct "DOWN"
      ]
    ability-level

  ]
    
     ;;;;;;; RUTA RAPIDA;;;;;;;;;;;;;;
  
  ask t_fast [
;    let origen origen.stop      
;    set next.stop item (position origen route ) route
    let next.stop_x [xcor] of next.stop
    let next.stop_y [ycor] of next.stop
    ;;; PRUEBA
;      face next.stop
;      fd 0.2
    ;;;
    facexy next.stop_x next.stop_y fd distance next.stop
;    fd distance next.stop
;    set heading towards next.stop
;    forward 1.0E-500
;		move-to next.stop
    set last.stop origen.stop
    set origen.stop next.stop
    ifelse portdest != origen.stop [set next.stop item (position next.stop route + 1) route][]
    ifelse [who] of origen.stop < [who] of next.stop 
      [
        set direct "UP"
      ]
      [
        set direct "DOWN"
      ]
    ability-level

  ]
    
  
end

to move_middle
  
  ask t_middle [
    let origen origen.stop      
    set next.stop item position origen route route
    let next.stop_x [xcor] of next.stop
    let next.stop_y [ycor] of next.stop
    ;;; PRUEBA
;      face next.stop
;      fd 0.2
    ;;;
    facexy next.stop_x next.stop_y 
;    fd distance next.stop
;    set heading towards next.stop
    forward 1.0E-500
		move-to next.stop
    set last.stop origen.stop
    set origen.stop next.stop
    set next.stop item (position origen route + 1) route
;    set path lput origen.stop path ;;;;;;
;    set path remove-duplicates path
  ]
 
  
end



to go-towards [to-turtle]
  ask t_middle [
;		let xcord [xcor] of to-turtle let ycord [ycor] of to-turtle
    set heading towards to-turtle
    forward 1.0E-500
		move-to to-turtle
  ]
end

to driver-act
  
;    let transmileio-p transmilenio 151
    foreach route [ 
      x -> 
      set next.stop x
      go-towards next.stop
;      tick
    ]
  
  
  
  
end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; RETORNO DE BUSES
to return-articulado
  ;;; ESTA PARTE DUVUELVE AL ARTICULADO
  ask transmilenio 
  [
    ifelse portdest = origen.stop
    [
      set portDest portOri
      set portOri origen.stop
      set direct "DOWN"
      set recorridos recorridos + 1
      
    ]
    []
  ]
  ask t_easy
  [
     ifelse portdest = origen.stop ;or portori = next.stop
    [
      set portDest portOri
      set portOri origen.stop
      set route reverse route
      set recorridos recorridos + 1
      
    ]
    []
  ]
  ask t_middle
  [
     ifelse portdest = origen.stop
    [
      set portDest portOri
      set portOri origen.stop
      set route reverse route
      set recorridos recorridos + 1
      
    ]
    []
  ]
  ask t_fast
  [
     ifelse portdest = origen.stop
    [
      set portDest portOri
      set portOri origen.stop
      set route reverse route
      set recorridos recorridos + 1
      
    ]
    []
  ]
end


to ability-level
  ifelse  pass_capacity = on_board [set cap_status "full"][set cap_status "empty"]
end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; IDENTIFICANDO CAMINOS ;;;;;;;;;;;;;;;;;;;;;;

to give-path
  ask transmilenio [    
;    set path lput origen.stop path 
    if portdest = origen.stop and recorridos = 1 [
      set route path
    ]
  ]
end
