;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  TRANSMILENIO ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to setuptrans
  
  let portals_id sort [id] of nodos with [tipo = "PORT"]
  let portals_who sort [who] of nodos with [tipo = "PORT"] ;[387 391 398 412 430 441 458 469 482]


  set portals_to sort [who] of nodos with [tipo = "PORT"]
  
  foreach portals_who [ 
    n -> create-transmilenio length all_portals - 1 [
      set shape "truck"
      set color red           

      setxy [xcor] of nodo n [ycor] of nodo n
      set direct "DOWN"     
      set size 0.6
      set path [];list ("x") (origen.stop)
      set recorridos 0
       
    
      
      ]  
  ]
    
    foreach portals_who [
      m -> 
      (foreach (sort [who] of transmilenio-on nodo m ) (remove m portals_to)
        [ [o p] -> ask articulado o [
;          set portals_to remove m portals_to
          set origin_portal nodo m
          set destination_portal nodo p
          set origen.stop origin_portal 
          set genes m
          set apoc p
          set name_route word [id] of origin_portal [id] of destination_portal
        ]
      ])
    ]
end

to setup_transmi_med_fast
  let gen_x_route sort [genes] of transmilenio
  let apoc_x_route sort [apoc] of transmilenio
  let nameR_x_route sort [name_route] of transmilenio
  let who_x_route sort [who] of transmilenio
  
;  foreach gen_x_route [
  (foreach (gen_x_route )(who_x_route )(nameR_x_route) [
    [g w n] ->
    create-t_easy 1 [
      set shape "truck"
      set color yellow
      setxy [xcor] of nodo g [ycor] of nodo g
      set pass_capacity bus_capacity
      set on_board 0
      set id_pass []
      set cap_status "empty";capacity status   
      set size 0.6
      set origin_portal nodo [genes] of articulado w
      set destination_portal nodo [apoc] of articulado w
      set origen.stop origin_portal 
      set path  [path] of articulado w
      set route path
      set recorridos 0
      set direCt "DOWN"
      set name_route (word "e" n "-" who)
      set genes [genes] of articulado w
      set apoc [apoc] of articulado w
;      set freq_fast round ((length path) / ((length path) mod ( ((length path) * fast_freq))))
;      foreach path [
;        b ->
;        if ((position b path + 1) mod freq_fast) = 0 [
;          set route lput b route
;        ]
;      ]
      set route fput origin_portal route
      set route lput destination_portal route
      set route remove-duplicates route
      if origin_portal = last path [set path reverse path set route path set route fput origin_portal route]
      set next_stop item (position origen.stop route ) route 
    ]
    create-t_middle 1 [
      set shape "truck"
      set color gray
      setxy [xcor] of nodo g [ycor] of nodo g
      set pass_capacity bus_capacity   
      set on_board 0
      set id_pass []
      set cap_status "empty";capacity status
      set size 0.6
      set origin_portal nodo [genes] of articulado w
      set destination_portal nodo [apoc] of articulado w
      set origen.stop origin_portal 
      set path but-last [path] of articulado w
      set route []
      set recorridos 0
      set direCt "DOWN"
      set name_route (word "m" n "-" who)
      set genes [genes] of articulado w
      set apoc [apoc] of articulado w
      set freq_middle floor ((length path) / ((length path) mod (((length path) * mid_freq))))
;      show freq_middle
      foreach path [
        b ->
        if ((position b path + 1) mod freq_middle) = 0 [
          set route lput b route
        ]
      ]
      set route fput origin_portal route
      set route lput destination_portal route
      set route remove-duplicates route
      set next_stop item (position origen.stop route ) route 
    ]
    create-t_fast 1 [
      set shape "truck"
      set color green
      setxy [xcor] of nodo g [ycor] of nodo g
      set pass_capacity bus_capacity   
      set on_board 0
      set id_pass []
      set cap_status "empty";capacity status
      set size 0.6
      set origin_portal nodo [genes] of articulado w
      set destination_portal nodo [apoc] of articulado w
      set origen.stop origin_portal 
      set path but-last [path] of articulado w
      set route []
      set recorridos 0
      set direCt "DOWN"
      set name_route (word "f" n "-" who)
      set genes [genes] of articulado w
      set apoc [apoc] of articulado w
      set freq_fast round ((length path) / ((length path) mod ( ((length path) * fast_freq))))
      foreach path [
        b ->
        if ((position b path + 1) mod freq_fast) = 0 [
          set route lput b route
        ]
      ]
      set route fput origin_portal route
      set route lput destination_portal route
      set route remove-duplicates route
      set next_stop item (position origen.stop route ) route 
    ]
  ])
  
  
  
end

to setup-tm_on_demand
  create-t_easy #_easy [
    setxy random-xcor random-ycor
    set shape "truck"
    set color yellow
    set size 0.6
;    set inicio one-of vertices
    set pass_capacity bus_capacity   
    set cap_status "empty";capacity status
;    setxy [xcor] of origin_portal [ycor] of origin_portal
    set od_dest place_from_gaussian_mixture 0 0 -1 gm_dest 
     
		span_from_gaussian_mixture 0 0 -1 gm_org
    set od_ori current_node 
;    set current_node
    set origen.stop current_node
    set on_demand_route [name_route] of transmilenio with [member? od_ori path and member? od_dest path]
;    ask transmilenio [if member? (current_node) path and member? (destination_portal) path [set on_demand_route lput name_route on_demand_route ]]
    let name_route_1 item 0 shuffle on_demand_route    
    let whoRouteRef item 0 [who] of transmilenio with [name_route = name_route_1]
    set path [path] of articulado whoRouteRef
    set origin_portal nodo [genes] of articulado whoRouteRef
    set destination_portal nodo [apoc] of articulado whoRouteRef
    set genes od_ori
    set apoc od_dest
    set path remove origin_portal path  set path remove destination_portal path
    set path fput origin_portal path set path lput destination_portal path
    set name_route (name_route_1) 
    set route path
    set recorridos 0    
    ifelse position origen.stop route + 1 >= length route [
      set next_stop origen.stop
    ][
      set next_stop item (position origen.stop route + 1) route
    ]
    set od_ori 0
    set od_dest 0
    set options_route on_demand_route
    if length on_demand_route = 0 [user-message (word "bus " who " murio") die ]
    show who show options_route
    set on_demand_route 0
;    set inicio vertex 56
;    set llegada vertex 53
    
  ]
end




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  PROCEDIMIENTOS TRANSMILENIO   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to move-articulado
  
;  if [direct] of transmilenio = "DOWN";any? vertices with [direct = "DOWN"] = TRUE
  let portals_id sort [id] of nodos with [tipo = "PORT"]  ;[56	60	67	81	99	110	127	138	151]
  let portals_who sort [who] of nodos with [tipo = "PORT"]
  let connector_id sort [id] of nodos with [tipo = "ORI"];[0 11 19 26  37 41 50 53] 
  let connector_who sort [who] of nodos with [tipo = "ORI"]
  let connector_path [
    [419	422	366	366	366	366	366	366	366] ;366
    [375	375	377	381	381	381	378	381	381] ;
    [377	377	426	377	377	377	377	377	377] ;426
    [380	380	390	380	380	405	394	405	405] ;
    [383	383	383	433	447	403	403	403	403] ;37
    [404	404	405	404	404	465	407	407	407] ;41
    [401	401 401 401 401 401 476	416	416] ;50
    [417	417	417	414	414	414	417	493	504];53
  ]

  
  ;;;;;;; ARTICULADOS BAJANDO ;;;;;;;;;;;;;;
  
  ask transmilenio with [direct = "DOWN"]  
  [
    ifelse member? [id] of origen.stop  connector_id  = TRUE
    [      
      let connector_position position [who] of origen.stop connector_who ; posicion del conector en el arreglo
      let destination_position position [who] of destination_portal portals_who ; posicion del portal de destino en el arreglo
      let exit_node nodo item 0 [who] of nodos with [id = item destination_position item connector_position connector_path]
      set next_stop exit_node 
      let next_stop_x [xcor] of next_stop
      let next_stop_y [ycor] of next_stop
      ;;; PRUEBA
;      face next_stop
;      fd 0.2
      ;;;
      facexy next_stop_x next_stop_y 
      fd distance next_stop
      ifelse [who] of origen.stop < [who] of next_stop 
      [
        set direct "UP"
      ]
      [
        set direct "DOWN"
      ]
      set last_stop origen.stop
      set origen.stop next_stop
      set path lput origen.stop path ;;;;;;
      set path remove-duplicates path
      
    ]
    [
      let origen origen.stop
      
      
      set next_stop item 0 [end1] of edges_tm with [end2 = origen and capacity = 4];of transmilenio]
                                                                ;      set options.stop  [end2] of links with [end1 = id_origin_stop ]
      let next_stop_x [xcor] of next_stop
      let next_stop_y [ycor] of next_stop
      ;;; PRUEBA
;      face next_stop
;      fd 0.2
      ;;;
      facexy next_stop_x next_stop_y 
      fd distance next_stop
      set last_stop origen.stop
      set origen.stop next_stop
      set next_stop item 0 [end1] of links with [end2 = origen ]
      set path lput origen.stop path ;;;;;;
      set path remove-duplicates path
     
    ]
    set path remove-duplicates path
     ]
  
  ;;;;;;; ARTICULADOS SUBIENDO;;;;;;;;;;;;;;
  
  ask transmilenio with [direct = "UP"]  
  [
    ifelse member? [who] of origen.stop  connector_who  = TRUE
    [      
      let connector_position position [who] of origen.stop connector_who ; posicion del conector en el arreglo
      let destination_position position [who] of destination_portal portals_who ; posicion del portal de destino en el arreglo
      let exit_node nodo item 0 [who] of nodos with [id = item destination_position item connector_position connector_path]
      set next_stop exit_node 
;      set next_stop nodo  (item destination_position item connector_position connector_path);nodo item destination_position item connector_position connector_path
      let next_stop_x [xcor] of next_stop
      let next_stop_y [ycor] of next_stop
      ;;; PRUEBA
;      face next_stop
;      fd 0.2
      ;;;
      facexy next_stop_x next_stop_y fd distance next_stop
      ifelse [who] of origen.stop < [who] of next_stop 
      [
        set direct "UP"
      ]
      [
        set direct "DOWN"
      ]
      set last_stop origen.stop
      set origen.stop next_stop
      set path lput origen.stop path ;;;;;;
      set path remove-duplicates path

      
    ]
    [
      let origen origen.stop
      
      
      set next_stop item 0 [end2] of edges_tm with [end1 = origen and capacity = 4];of transmilenio]
                                                                ;      set options.stop  [end2] of links with [end1 =  ]
      let next_stop_x [xcor] of next_stop
      let next_stop_y [ycor] of next_stop
      ;;; PRUEBA
;      face next_stop
;      fd 0.2
      ;;;
      facexy next_stop_x next_stop_y fd distance next_stop
      set last_stop origen.stop
      set origen.stop next_stop
      set next_stop item 0 [end2] of links with [end1 = origen ]
      set path lput origen.stop path ;;;;;;
      set path remove-duplicates path
      
      
    ]
    set path remove-duplicates path
    
     ]
 
    ;;;;;;; RUTA FACIL;;;;;;;;;;;;;;
  
  ask t_easy [
    let origen origen.stop      
;    set next_stop item (position origen route ) route
    let next_stop_x [xcor] of next_stop
    let next_stop_y [ycor] of next_stop
  
    facexy next_stop_x next_stop_y fd distance next_stop
    set last_stop origen.stop
    set origen.stop next_stop    
;    ifelse destination_portal != origen.stop [set next_stop item (position next_stop route + 1) route][]
    ifelse position origen.stop route + 1 >= length route [
      set next_stop origen.stop
    ][
      set next_stop item (position origen.stop route + 1) route
    ]
    ifelse [who] of origen.stop < [who] of next_stop 
      [
        set direct "UP"
      ]
      [
        set direct "DOWN"
      ]
    ability-level
    
;    move-in-route

  ] 
  
   ;;;;;;; RUTA MEDIA;;;;;;;;;;;;;;
  
  ask t_middle [
;    let origen origen.stop      
;    set next_stop item (position origen route ) route
    let next_stop_x [xcor] of next_stop
    let next_stop_y [ycor] of next_stop
    facexy next_stop_x next_stop_y fd distance next_stop
    set last_stop origen.stop
    set origen.stop next_stop
    ifelse destination_portal != origen.stop [set next_stop item (position next_stop route + 1) route][]
    ifelse [who] of origen.stop < [who] of next_stop 
      [
        set direct "UP"
      ]
      [
        set direct "DOWN"
      ]
    ability-level

  ]
    
     ;;;;;;; RUTA RAPIDA;;;;;;;;;;;;;;
  
  ask t_fast [
    let next_stop_x [xcor] of next_stop
    let next_stop_y [ycor] of next_stop    
    facexy next_stop_x next_stop_y fd distance next_stop
    set last_stop origen.stop
    set origen.stop next_stop
    ifelse destination_portal != origen.stop [set next_stop item (position next_stop route + 1) route][]
    ifelse [who] of origen.stop < [who] of next_stop 
      [
        set direct "UP"
      ]
      [
        set direct "DOWN"
      ]
    ability-level
    
;    move-in-route

  ]
    
  
end

to move_middle
  
  ask t_middle [
    let origen origen.stop      
    set next_stop item position origen route route
    let next_stop_x [xcor] of next_stop
    let next_stop_y [ycor] of next_stop
    facexy next_stop_x next_stop_y 
    forward 1.0E-500
		move-to next_stop
    set last_stop origen.stop
    set origen.stop next_stop
    set next_stop item (position origen route + 1) route
  ]
  
  
 
  
end




; --------- movement function --------------
to go-towards [from-turtle to-turtle]
  ask from-turtle [
		let xcord [xcor] of to-turtle let ycord [ycor] of to-turtle

    ifelse distance to-turtle != 0 [

      set heading towards to-turtle
      let from_vertex [who] of origen.stop
      let to_vertex [who] of next_stop
      let penalty2 1
      ifelse from_vertex = to_vertex 
      [
        set penalty2 1
      ][
        ifelse from_vertex < to_vertex 
        [
          set penalty2 [penalty] of edge_tm from_vertex to_vertex
        ][  
          carefully [set penalty2 [penalty] of edge_tm to_vertex from_vertex][user-message (word who)] 
        ]
      ] ; problem is order of min max from to
      let speed max_speed / penalty2

      ifelse abs(xcord - xcor) > speed OR abs(ycord - ycor) > speed [
        forward speed ;TODO correct by penalty
      ][
        forward distance to-turtle ;TODO correct by penalty
				move-to to-turtle
      ]
    ][move-to to-turtle]
  ]
end

;; ------------ move through path function ------------
to move-in-route 
	; if path not empty
;	ifelse not empty? route [
		ifelse distance next_stop = 0 [
			; check if current vertex is item 0 nd if true delete
			set origen.stop next_stop
      set last_stop origen.stop
    ifelse breed = t_easy [
      ifelse position origen.stop route + 1 >= length route [
      set next_stop origen.stop
    ][
      set next_stop item (position origen.stop route + 1) route
    ]][
      ifelse destination_portal != origen.stop [set next_stop item (position next_stop route + 1) route][]
    ]
      
;			set path remove-item 0 path	
		][
			; else move
			go-towards self next_stop
		]
;	][print "tm_empty"]
end

; ---------------- calculating traffic -----------------
;to calculate_traffic
;	foreach sort edges_tm [ 
;		[element] -> let inEdge length sort drivers with [ last_vertex = [ end1 ] of element and length path > 0 and item 0 path = [end2] of element ]
;		set inEdge inEdge + length sort drivers with [ last_vertex = [end2] of element and length path > 0 and item 0 path = [end1] of element ]
;		;ask element [ set penalty (( 1 + inEdge ) * inEdge_ponderator )^( 1 + max_capacity - capacity) ] 
;    ask element [ set penalty 1 + ((inEdge) / (10 ^ ( capacity - 1)) * 1 / ( count drivers / 100 ) ^ 2) ]
;
;		ask element	[ set cost dist * penalty ]
;	]
;
;;	set_traffic_color
;end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; RETORNO DE BUSES
to return-articulado
  ;;; ESTA PARTE DUVUELVE AL ARTICULADO
  ask transmilenio 
  [
    ifelse destination_portal = origen.stop
    [
      set destination_portal origin_portal
      set origin_portal origen.stop
      set direct "DOWN"
      set recorridos recorridos + 1
      
    ]
    []
  ]
  ask t_easy
  [
     ifelse destination_portal = origen.stop ;or origin_portal = next_stop
    [
      set destination_portal origin_portal
      set origin_portal origen.stop
      set route reverse route
      set recorridos recorridos + 1
      
    ]
    []
  ]
  ask t_middle
  [
     ifelse destination_portal = origen.stop
    [
      set destination_portal origin_portal
      set origin_portal origen.stop
      set route reverse route
      set recorridos recorridos + 1
      
    ]
    []
  ]
  ask t_fast
  [
     ifelse destination_portal = origen.stop
    [
      set destination_portal origin_portal
      set origin_portal origen.stop
      set route reverse route
      set recorridos recorridos + 1
      
    ]
    []
  ]
end


to ability-level
  ifelse  pass_capacity = on_board [set cap_status "full"][set cap_status "empty"]
end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; IDENTIFICANDO CAMINOS ;;;;;;;;;;;;;;;;;;;;;;

to give-path
  ask transmilenio [    
;    set path lput origen.stop path 
    if destination_portal = origen.stop and recorridos = 1 [
      set route path
    ]
  ]
end
