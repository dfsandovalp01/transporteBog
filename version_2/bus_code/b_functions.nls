;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  TRANSMILENIO ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to setuptrans
  
  let portals_id sort [id] of nodos with [tipo = "PORT"]
  let portals_who sort [who] of nodos with [tipo = "PORT"] ;[387 391 398 412 430 441 458 469 482]


  set portals_to sort [who] of nodos with [tipo = "PORT"]
  
  foreach portals_who [ 
    n -> create-transmilenio length all_portals - 1 [
      set shape "truck"
      set color red           
      set family_route "origin"
      setxy [xcor] of nodo n [ycor] of nodo n
      set direct "DOWN"     
      set size 0.6
      set pass_capacity bus_capacity
      set path [];list ("x") (origen.stop)
      set recorridos 0
       
    
      
      ]  
  ]
    
    foreach portals_who [
      m -> 
      (foreach (sort [who] of transmilenio-on nodo m ) (remove m portals_to)
        [ [o p] -> ask articulado o [
;          set portals_to remove m portals_to
          set origin_portal nodo m
          set destination_portal nodo p
          set origen.stop origin_portal 
          set genes m
          set apoc p
          set path fput nodo m path
          set name_route word [who] of origin_portal [who] of destination_portal
        ]
      ])
    ]
end

to setup_transmi_med_fast
  let gen_x_route sort [genes] of transmilenio
  let apoc_x_route sort [apoc] of transmilenio
  let nameR_x_route sort [name_route] of transmilenio
  let who_x_route sort [who] of transmilenio
  set all_route_t_easy []
  set all_route_t_middle []
  set all_route_t_fast []
  
  (foreach (gen_x_route )(who_x_route )(nameR_x_route) [
    [g w n] ->
    create-transmilenio 1 [
      set family_route "t_easy"
      set shape "truck"
      set color yellow
      setxy [xcor] of nodo g [ycor] of nodo g
      set pass_capacity bus_capacity
      set on_board 0
      set id_pass []
      set cap_status "empty";capacity status   
      set size 0.6
      set origin_portal nodo [genes] of articulado w
      set destination_portal nodo [apoc] of articulado w
      set is_stop "yes"
      set origen.stop origin_portal 
      set path [route] of articulado w
      set route path
      set recorridos 0
      set direCt "DOWN"
      set name_route (word "e" n "-" who)
      set genes [genes] of articulado w
      set apoc [apoc] of articulado w
      set route fput origin_portal route
      set route lput destination_portal route
      set route remove-duplicates route
      if origin_portal = last path [set path reverse path set route path set route fput origin_portal route]
      set next_stop item (position origen.stop route ) route 
      set all_route_t_easy lput route all_route_t_easy
      
    ]
    
    create-transmilenio 1 [
      set family_route "t_middle"
      set shape "truck"
      set color red
      setxy [xcor] of nodo g [ycor] of nodo g
      set pass_capacity bus_capacity   
      set on_board 0
      set id_pass []
      set cap_status "empty";capacity status
      set size 0.6
      set origin_portal nodo [genes] of articulado w
      set destination_portal nodo [apoc] of articulado w
      set is_stop "yes"
      set origen.stop origin_portal 
      set path [route] of articulado w
      set route []
      set recorridos 0
      set direCt "DOWN"
      set name_route (word "m" n "-" who)
      set genes [genes] of articulado w
      set apoc [apoc] of articulado w
      set freq_middle floor ((length path) / ((length path) mod (((length path) * mid_freq))))
      foreach path [
        b ->
        if ((position b path + 1) mod freq_middle) = 0 [
          set route lput b route
        ]
      ]
      set route fput origin_portal route
      set route lput destination_portal route
      set route remove-duplicates route
      ;set next_stop item (position origen.stop route ) route 
      set next_stop item (position origen.stop path ) path 
      set all_route_t_middle lput route all_route_t_middle
    ]
    
    create-transmilenio 1 [
      set family_route "t_fast"
      set shape "truck"
      set color green
      setxy [xcor] of nodo g [ycor] of nodo g
      set pass_capacity bus_capacity   
      set on_board 0
      set id_pass []
      set cap_status "empty";capacity status
      set size 0.6
      set origin_portal nodo [genes] of articulado w
      set destination_portal nodo [apoc] of articulado w
      set is_stop "yes"
      set origen.stop origin_portal 
      set path [route] of articulado w
      set route []
      set recorridos 0
      set direCt "DOWN"
      set name_route (word "f" n "-" who)
      set genes [genes] of articulado w
      set apoc [apoc] of articulado w
      set freq_fast round ((length path) / ((length path) mod ( ((length path) * fast_freq))))
      foreach path [
        b ->
        if ((position b path + 1) mod freq_fast) = 0 [
          set route lput b route
        ]
      ]
      set route fput origin_portal route
      set route lput destination_portal route
      set route remove-duplicates route
      set next_stop item (position origen.stop path ) path 
      set all_route_t_fast lput route all_route_t_fast
    ]
  ])
  
  
  
end

to setup-tm_on_demand
  create-transmilenio #_easy [
    set family_route "t_easy"
      set shape "truck"
      set color yellow
;      setxy [xcor] of nodo g [ycor] of nodo g
      set pass_capacity bus_capacity
      set on_board 0
      set id_pass []
      set cap_status "empty";capacity status   
      set size 0.6
;    set family_route "t_easy"
;    setxy random-xcor random-ycor
;    set shape "truck"
;    set color 60
;    set size 1
;    set inicio one-of vertices
;    set pass_capacity bus_capacity   
;    set cap_status "empty";capacity status
;    setxy [xcor] of origin_portal [ycor] of origin_portal
    set od_dest place_from_gaussian_mixture 0 0 -1 gm_dest 
     
		span_from_gaussian_mixture 0 0 -1 gm_org
    set od_ori current_node 
    ;user-message (word who " " od_dest " " od_ori)
;    set current_node
    set origen.stop current_node
    foreach all_route_t_easy [
        m ->
        if member? (od_ori) m and member? (od_dest) m
        [
          if length [name_route] of transmilenio with [family_route = "t_easy" AND route = m] != 0 
          [
            let p_t_t m
            ifelse position od_ori m < position od_dest m 
            [
              set route m
              ;set p_t_t length sublist m (position current_node m) (position destination m)
              ;set stop_icu fput p_t_t stop_icu
            ]
            [
              set route reverse m
              ;set p_t_t length sublist m (position destination m) (position (last m) m) +
              ;length sublist m  (position current_node m) (position (last m) m)
              ;set stop_icu fput p_t_t stop_icu            
            ] 
            ;          set p_t_t
            ;set icu fput item 0 [name_route] of transmilenio with [family_route = "t_easy" AND route = m] icu
            ;set icu remove-duplicates icu
            ;set icu_e fput item 0 [name_route] of transmilenio with [family_route = "t_easy" AND route = m] icu_e
            ;set icu_e remove-duplicates icu_e
          ]
        ]
      ]    
    set path route
    let route-1 route
    set origin_portal item 0 route;[origin_portal] of transmilenio with [family_route = "t_easy" AND route = route-1]
      set destination_portal item (length route - 1) route;[origin_portal] of transmilenio with [family_route = "t_easy" AND route = route-1]
      set is_stop "yes"
      set origen.stop od_ori 
    ;set on_demand_route [name_route] of transmilenio with [member? od_ori path and member? od_dest path]
;    ask transmilenio [if member? (current_node) path and member? (destination_portal) path [set on_demand_route lput name_route on_demand_route ]]
      
;      set route path
      set recorridos 0
;      set direct "DOWN"
    set genes [who] of item 0 route;[genes] of transmilenio with [family_route = "t_easy" AND route = route-1]
    set apoc [who] of item (length route - 1) route ;[genes] of transmilenio with [family_route = "t_easy" AND route = route-1]
    set name_route (word "e_p_" genes apoc "-" who)
;      set route fput origin_portal route
;      set route lput destination_portal route
;      set route remove-duplicates route
      if origin_portal = last path [set path reverse path set route path set route fput origin_portal route]
    carefully [set next_stop item (position origen.stop route + 1 ) route ][user-message (word who )]
     ; set all_route_t_easy lput route all_route_t_easy
    
    
    
    
    
    
    ; ---------------------- pasado
;    let name_route_1 item 0 shuffle on_demand_route    
;    let whoRouteRef item 0 [who] of transmilenio with [name_route = name_route_1]
;    set path [route] of articulado whoRouteRef
;    set origin_portal nodo [genes] of articulado whoRouteRef
;    set destination_portal nodo [apoc] of articulado whoRouteRef
;    set genes od_ori
;    set apoc od_dest
;    set path remove origin_portal path  set path remove destination_portal path
;    set path fput origin_portal path set path lput destination_portal path
;    set name_route (name_route_1) 
;    set route path
;    set recorridos 0    
;    ifelse position origen.stop route + 1 >= length route [
;      set next_stop origen.stop
;    ][
;      set next_stop item (position origen.stop route + 1) route
;    ]
;    set od_ori 0
;    set od_dest 0
;    set options_route on_demand_route
;    if length on_demand_route = 0 [user-message (word "bus " who " murio") die ]
;    show who show options_route
;    set on_demand_route 0
;    set inicio vertex 56
;    set llegada vertex 53
    
  ]
end




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  PROCEDIMIENTOS TRANSMILENIO   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to move-articulado
  
;  if [direct] of transmilenio = "DOWN";any? vertices with [direct = "DOWN"] = TRUE
  let portals_id sort [id] of nodos with [tipo = "PORT"]  ;[56	60	67	81	99	110	127	138	151]
  let portals_who sort [who] of nodos with [tipo = "PORT"]
  let connector_id sort [id] of nodos with [tipo = "ORI"];[0 11 19 26  37 41 50 53] 
  let connector_who sort [who] of nodos with [tipo = "ORI"]
  let connector_path [
    [419	422	366	366	366	366	366	366	366] ;366
    [375	375	377	381	381	381	378	381	381] ;
    [377	377	426	377	377	377	377	377	377] ;426
    [380	380	390	380	380	405	394	405	405] ;
    [383	383	383	433	447	403	403	403	403] ;37
    [404	404	405	404	404	465	407	407	407] ;41
    [401	401 401 401 401 401 476	416	416] ;50
    [417	417	417	414	414	414	417	493	504];53
  ]

  
  ;;;;;;; ARTICULADOS BAJANDO ;;;;;;;;;;;;;;
  
  ask transmilenio with [family_route = "origin" and direct = "DOWN" and recorridos = 0]  
  [
    ifelse member? [id] of origen.stop  connector_id  = TRUE
    [      
      let connector_position position [who] of origen.stop connector_who ; posicion del conector en el arreglo
      let destination_position position [who] of destination_portal portals_who ; posicion del portal de destino en el arreglo
      let exit_node nodo item 0 [who] of nodos with [id = item destination_position item connector_position connector_path]
      set next_stop exit_node 
      let next_stop_x [xcor] of next_stop
      let next_stop_y [ycor] of next_stop
      ;;; PRUEBA
;      face next_stop
;      fd 0.2
      ;;;
      facexy next_stop_x next_stop_y 
      fd distance next_stop
      ifelse [who] of origen.stop < [who] of next_stop 
      [
        set direct "UP"
      ]
      [
        set direct "DOWN"
      ]
      set last_stop origen.stop
      set origen.stop next_stop
      set path lput origen.stop path ;;;;;;
      set path remove-duplicates path
      
    ]
    [
      let origen origen.stop
      
      
      set next_stop item 0 [end1] of edges_tm with [end2 = origen and capacity = 4];of transmilenio]
                                                                ;      set options.stop  [end2] of links with [end1 = id_origin_stop ]
      let next_stop_x [xcor] of next_stop
      let next_stop_y [ycor] of next_stop
      ;;; PRUEBA
;      face next_stop
;      fd 0.2
      ;;;
      facexy next_stop_x next_stop_y 
      fd distance next_stop
      set last_stop origen.stop
      set origen.stop next_stop
      set next_stop item 0 [end1] of links with [end2 = origen ]
      set path lput origen.stop path ;;;;;;
      set path remove-duplicates path
      if destination_portal = origen.stop and recorridos = 0 [
        set route path
        set Conteo_origin Conteo_origin + 1
      ]
     
    ]
    set path remove-duplicates path
    return-articulado-1
     ]
  
  ;;;;;;; ARTICULADOS SUBIENDO;;;;;;;;;;;;;;
  
  ask transmilenio with [family_route = "origin" and direct = "UP" and recorridos = 0]  
  [
    ifelse member? [who] of origen.stop  connector_who  = TRUE
    [      
      let connector_position position [who] of origen.stop connector_who ; posicion del conector en el arreglo
      let destination_position position [who] of destination_portal portals_who ; posicion del portal de destino en el arreglo
      let exit_node nodo item 0 [who] of nodos with [id = item destination_position item connector_position connector_path]
      set next_stop exit_node 
;      set next_stop nodo  (item destination_position item connector_position connector_path);nodo item destination_position item connector_position connector_path
      let next_stop_x [xcor] of next_stop
      let next_stop_y [ycor] of next_stop
      ;;; PRUEBA
;      face next_stop
;      fd 0.2
      ;;;
      facexy next_stop_x next_stop_y fd distance next_stop
      ifelse [who] of origen.stop < [who] of next_stop 
      [
        set direct "UP"
      ]
      [
        set direct "DOWN"
      ]
      set last_stop origen.stop
      set origen.stop next_stop
      set path lput origen.stop path ;;;;;;
      set path remove-duplicates path

      
    ]
    [
      let origen origen.stop
      
      
      set next_stop item 0 [end2] of edges_tm with [end1 = origen and capacity = 4];of transmilenio]
                                                                ;      set options.stop  [end2] of links with [end1 =  ]
      let next_stop_x [xcor] of next_stop
      let next_stop_y [ycor] of next_stop
      ;;; PRUEBA
;      face next_stop
;      fd 0.2
      ;;;
      facexy next_stop_x next_stop_y fd distance next_stop
      set last_stop origen.stop
      set origen.stop next_stop
      set next_stop item 0 [end2] of links with [end1 = origen ]
      set path lput origen.stop path ;;;;;;
      set path remove-duplicates path
      if destination_portal = origen.stop and recorridos = 0 [
        set route path
        set Conteo_origin Conteo_origin + 1
      ]
      
      
    ]
    set path remove-duplicates path
    return-articulado-1
     ]
 
    ;;;;;;; RUTA FACIL;;;;;;;;;;;;;;
  
  ask transmilenio with [family_route = "t_easy"] [
    let origen origen.stop      
;    set next_stop item (position origen route ) route
    let next_stop_x [xcor] of next_stop
    let next_stop_y [ycor] of next_stop
    
    move-in-route    
    return-articulado

  ] 
  
   ;;;;;;; RUTA MEDIA;;;;;;;;;;;;;;
  
  ask transmilenio with [family_route = "t_middle"] [
;    let origen origen.stop      
;    set next_stop item (position origen route ) route
    let next_stop_x [xcor] of next_stop
    let next_stop_y [ycor] of next_stop
    
    move-in-route 
    return-articulado

  ]
    
     ;;;;;;; RUTA RAPIDA;;;;;;;;;;;;;;
  
  ask transmilenio with [family_route = "t_fast"] [
    let next_stop_x [xcor] of next_stop
    let next_stop_y [ycor] of next_stop    
    
    move-in-route 
    return-articulado

  ]
    
  
end

to move_middle
  
  ask t_middle [
    let origen origen.stop      
    set next_stop item position origen route route
    let next_stop_x [xcor] of next_stop
    let next_stop_y [ycor] of next_stop
    facexy next_stop_x next_stop_y 
    forward 1.0E-500
		move-to next_stop
    set last_stop origen.stop
    set origen.stop next_stop
    set next_stop item (position origen route + 1) route
  ]
  
  
 
  
end




; --------- movement function --------------
to go-towards [from-turtle to-turtle]
  ask from-turtle [
		let xcord [xcor] of to-turtle let ycord [ycor] of to-turtle

    ifelse distance to-turtle != 0 [

      set heading towards to-turtle
      let from_vertex [who] of origen.stop
      let to_vertex [who] of next_stop
      let penalty2 1
      ifelse from_vertex = to_vertex 
      [
        set penalty2 1
      ][
        ifelse from_vertex < to_vertex 
        [
          set penalty2 [penalty] of edge_tm from_vertex to_vertex
        ][
          carefully [set penalty2 [penalty] of edge_tm to_vertex from_vertex ][user-message (word who " penalty1 " from_vertex " " to_vertex)]  
          ;set penalty2 [penalty] of edge_tm to_vertex from_vertex 
        ]
      ] ; problem is order of min max from to
      let speed 1
      carefully [set speed max_speed / penalty2][user-message (word who " penalty1 " from_vertex to_vertex)]

      ifelse abs(xcord - xcor) > speed OR abs(ycord - ycor) > speed [
        forward speed ;TODO correct by penalty
      ][
        forward distance to-turtle ;TODO correct by penalty
				move-to to-turtle
      ]
    ][move-to to-turtle]
  ]
end

;; ------------ move through path function ------------
; ------------ move through path function ------------
to move-in-route 
	; if path not empty
	;ifelse not empty? path [
		ifelse distance next_stop = 0 [
			; check if current vertex is item 0 nd if true delete
			set origen.stop next_stop
    ifelse member? origen.stop route [set is_stop "yes"][set is_stop "no"]
    ifelse (position origen.stop path + 1) >= length path [
      set next_stop origen.stop
    ][
      set next_stop item (position origen.stop path + 1) path
    ]
    
    
    
    ifelse [who] of origen.stop < [who] of next_stop 
    [
      set direct "UP"
    ]
    [
      set direct "DOWN"
    ]
    ;carefully [][user-message (word "Soy " who "next_stop" next_stop)]
    return-articulado
 ;   ability-level	
  		][
			; else move
			go-towards self next_stop
		]
	;][print "empty"]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; TRAFICO Y VELOCIDAD ;;;;;;;;;;;;;;;;;;;;;;

to calculate_traffic
	foreach sort edges_tm [ 
		[element] -> let inEdge length sort transmilenio with [ origen.stop = [ end1 ] of element and length route > 0 and item 0 route = [end2] of element ]
		set inEdge inEdge + length sort transmilenio with [ origen.stop = [end2] of element and length route > 0 and item 0 route = [end1] of element ]
		;ask element [ set penalty (( 1 + inEdge ) * inEdge_ponderator )^( 1 + max_capacity - capacity) ] 
    ask element [ set penalty 1 + ((inEdge) / (10 ^ ( capacity - 1)) * 1 / ( count transmilenio / 100 ) ^ 2) ]

		ask element	[ set cost dist * penalty ]
	]

	set_traffic_color
end

to set_traffic_color
	ask edges_tm [set color sky]
	let first_centile int ( ( length sort edges_tm ) * 0.1 ) 
	let top10 sublist sort-on [penalty] edges_tm (length sort edges_tm - first_centile) ( length sort edges_tm)
	set top10 filter [ [elem] -> [penalty] of elem > min_penalty ] top10
	let top50 sublist sort-on [penalty] edges_tm (length sort edges_tm - first_centile * 5) ( length sort edges_tm)
	set top50 filter [ [elem] -> [penalty] of elem > min_penalty ] top50

	foreach top50 [[elem] -> ask elem [set color yellow]]
	foreach top10 [[elem] -> ask elem [set color red]]
end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; RETORNO DE BUSES

to return-articulado
   if destination_portal = origen.stop ;or origin_portal = next_stop
    [
      set destination_portal origin_portal
      set origin_portal origen.stop
      set path reverse path
      set route reverse route
      set recorridos recorridos + 1      
    ]
  
end


to return-articulado-1
  ;;; ESTA PARTE DUVUELVE AL ARTICULADO
;  ask transmilenio with [family_route = "origin"]
;  [
    ifelse destination_portal = origen.stop
    [
      set destination_portal origin_portal
      set origin_portal origen.stop
      set direct "DOWN"
      ;if recorridos = 0 [set route path]
      set recorridos recorridos + 1
      
    ]
    []
end


to ability-level
  ask transmilenio [
    ifelse pass_capacity = on_board [
      user-message (word "voy lleno " who )
      set cap_status "full"
    ][
      set cap_status "empty"
    ]
  ]
  
end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; IDENTIFICANDO CAMINOS ;;;;;;;;;;;;;;;;;;;;;;

to give-path
  ask transmilenio with [family_route = "origin"] [    
;    set path lput origen.stop path 
    if destination_portal = origen.stop and recorridos = 1 [
      set route path
      print name_route 
      print route
    ]
  ]
end



