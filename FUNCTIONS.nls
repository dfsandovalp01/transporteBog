extensions [nw table]
;;;;;;;;;;;;;;;
;; FUNCTIONS ;;
;;;;;;;;;;;;;;;


to setup
  clear-all
  setup-importer
  setup-portales
  setup-conectores
;  setup-estaciones
  setup-transmilenio
  setup-people
;  crear-vias
  set conectores (list )
  reset-ticks
end

to setup-portales
  ask vertices
  [if tipo = "PORT" 
    [set shape "house"
     set color green
     set size 0.6]
  ]
end

to setup-conectores
  ask vertices
  [if tipo = "ORI" 
    [set shape "circle"
     set color yellow
     set size 0.4]
  ]
end

to setup-estaciones
  create-estaciones 5 [
    set shape "circle"
    set color white
    set size 0.2
    set xcor random-xcor
    set ycor random-ycor
  ]
end

to setup-transmilenio 
  
  let Portales.who sort [who] of vertices with [tipo = "PORT"]  
  
  
  while [empty? Portales.who = FALSE] [
    
    
   let ind.Portal item 0 Portales.who
    
     create-transmilenio articulados_x_portal [
      set shape "truck"
      set color red           
      setxy [xcor] of vertex item 0 Portales.who  [ycor] of vertex item 0 Portales.who      
      set direct "DOWN"     
      set size 0.6
      set path list ("x") (origen.stop)
      
    ]
    let transmiAsig sort [who] of transmilenio-on vertex item 0 Portales.who       
    let portalesTo sort [who] of vertices with [tipo = "PORT"]
      set portalesTo remove-item position ind.Portal portalesTo portalesTo
    
    while [empty? transmiAsig = FALSE][
      
      ask articulado item 0 transmiAsig [
        set portOri vertex item 0 Portales.who
        set portDest vertex item 0 portalesTo
        set origen.stop portOri
      ]
      set transmiAsig remove-item 0 transmiAsig
      set portalesTo remove-item 0 portalesTo
      
    ]
    set Portales.who remove-item 0 Portales.who
  ] 

end

to setup-people
  create-people 10 [
    setxy random-xcor random-ycor
    set shape "person"
    set color white
    set size 0.5
    
  ]
end

to crear-vias ;; EJERCICIO DE PRACTICA
  ask estaciones;(min-one-of (estaciones) [who])
  [ifelse who <  max-one-of (estaciones) [who]
    [
      set color blue
      create-link-to estacion (who + 1);(if max-one-of );([ifelse  (max-one-of (estaciones) [who]) = true [1][who + 1]])
    ]
    [
      create-link-to portal 1
    ]
  set name-troncal "nacional"
  ]

end

;;;;;;;;;;;;;;;;;;;;;;; GO ;;;;;;;;;;;;;;;;;;;;;;

to go
  ask transmilenio [
    move-articulado
    return-articulado
    give-path
  ]
  
;  ask transmilenio [mover-transmi-from-stop]
  ask people [move-people]
  tick
end




to move-people ;; lleva a las personas a la estacion mas cercana
;  ask people
;    [
      let vertex-to-move min-one-of (vertices) [distance myself]
      move-to vertex-to-move
;    ]
end


to move-articulado
  
;  if [direct] of transmilenio = "DOWN";any? vertices with [direct = "DOWN"] = TRUE
  let Portales.who sort [who] of vertices with [tipo = "PORT"]  ;[54 57 64 78 96 107 123 134 147]
  let connector.id [0 10 17 24 27 38 47 50]
  let connector.path [
    [51 55 1 1 1 1 1 1 1] ;0
    [9 9 11 12 12 15 15 15 15] ;10
    [11 11 58 11 11 18 18 18 18] ;17
    [14 14 14 65 79 25 25 25 25] ;24 
    [16 16 16 16 16 28 29 28 29] ;27
    [28 28 28 26 26 97 39 39 39] ;38
    [37 37 37 37 37 37 108 48 48] ;47
    [46 46 46 46 46 46 49 124 135];50
  ]
  
    
  ask transmilenio with [direct = "DOWN"]  
  [
    ifelse member? [who] of origen.stop  connector.id  = TRUE
    [      
      let connector.position position [who] of origen.stop connector.id ; posicion del conector en el arreglo
      let destination.position position [who] of portDest Portales.who ; posicion del portal de destino en el arreglo
      set next.stop vertex item destination.position item connector.position connector.path
      let next.stop_x [xcor] of next.stop
      let next.stop_y [ycor] of next.stop
      facexy next.stop_x next.stop_y fd distance next.stop
      ifelse [who] of origen.stop < [who] of next.stop 
      [
        set direct "UP"
      ]
      [
        set direct "DOWN"
      ]
      set last.stop origen.stop
      set origen.stop next.stop
      
      
    ]
    [
      let origen origen.stop
      
      
      set next.stop item 0 [end1] of links with [end2 = origen ];of transmilenio]
                                                                ;      set options.stop  [end2] of links with [end1 = id.origen.stop ]
      let next.stop_x [xcor] of next.stop
      let next.stop_y [ycor] of next.stop
      facexy next.stop_x next.stop_y fd distance next.stop
      set last.stop origen.stop
      set origen.stop next.stop
      set next.stop item 0 [end1] of links with [end2 = origen ]
      
     
    ]
    
     ]
  
  ask transmilenio with [direct = "UP"]  
  [
    ifelse member? [who] of origen.stop  connector.id  = TRUE
    [      
      let connector.position position [who] of origen.stop connector.id ; posicion del conector en el arreglo
      let destination.position position [who] of portDest Portales.who ; posicion del portal de destino en el arreglo
      set next.stop vertex item destination.position item connector.position connector.path
      let next.stop_x [xcor] of next.stop
      let next.stop_y [ycor] of next.stop
      facexy next.stop_x next.stop_y fd distance next.stop
      ifelse [who] of origen.stop < [who] of next.stop 
      [
        set direct "UP"
      ]
      [
        set direct "DOWN"
      ]
      set last.stop origen.stop
      set origen.stop next.stop
     

      
    ]
    [
      let origen origen.stop
      
      
      set next.stop item 0 [end2] of links with [end1 = origen ];of transmilenio]
                                                                ;      set options.stop  [end2] of links with [end1 = id.origen.stop ]
      let next.stop_x [xcor] of next.stop
      let next.stop_y [ycor] of next.stop
      facexy next.stop_x next.stop_y fd distance next.stop
      set last.stop origen.stop
      set origen.stop next.stop
      set next.stop item 0 [end2] of links with [end1 = origen ]
      
      
    ]
    
     ]
  
  
    
  
end

to return-articulado
  ;;; ESTA PARTE DUVUELVE AL ARTICULADO
  ask transmilenio 
  [
    ifelse portdest = origen.stop
    [
      set portDest portOri
      set portOri origen.stop
      set direct "DOWN"
    ]
    []
  ]
end

to give-path
  ask transmilenio [
    
    set path lput origen.stop path 
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; IDENTIFICANDO CAMINOS ;;;;;;;;;;;;;;;;;;;;;;

to stop-articulado
;  ask transmilenio 
  ask articulado 148
  [
    ifelse portdest = origen.stop
    [
      print (word portOri "-" portDest )
      set path remove-duplicates path      
      print path
;      die
    ]
    []
    
  ]

end