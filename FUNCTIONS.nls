
;;;;;;;;;;;;;;;
;; FUNCTIONS ;;
;;;;;;;;;;;;;;;


to setup
  clear-all
  setup-importer
  setup-portales
;  setup-estaciones
  setup-transmilenio
  setup-people
;  crear-vias
  
  reset-ticks
end

to setup-portales
  create-portales 1 [
    set shape "house"
    set color green
    set xcor [xcor] of vertex 30
    set ycor [ycor] of vertex 30
  ]
end

to setup-estaciones
  create-estaciones 5 [
    set shape "circle"
    set color white
    set size 0.2
    set xcor random-xcor
    set ycor random-ycor
  ]
end

to setup-transmilenio
  create-transmilenio 3 [
    setxy [xcor] of portal 151 [ycor] of portal 151;random-xcor random-ycor
    let vertex-to-move min-one-of (portales) [distance myself]
;    set who.origen item 0 [who] of vertices-on patch-here
    set shape "truck"
    set color red
;    set last_stop vertex (item 0 [who] of vertices-on patch-here)
    print last.stop 
;   set last_vertex vertex-to-move
    move-to vertex-to-move
    ]

end

to setup-people
  create-people 3 [
    setxy random-xcor random-ycor
    set shape "person"
    set color white
    
  ]
end

to crear-vias
  ask estaciones;(min-one-of (estaciones) [who])
  [ifelse who < [who] of max-one-of (estaciones) [who]
    [
      set color blue
      create-link-to estacion (who + 1);(if max-one-of );([ifelse  (max-one-of (estaciones) [who]) = true [1][who + 1]])
    ]
    [
      create-link-to portal 1
    ]
  set name-troncal "nacional"
  ]
;  [while [who < [who] of max-one-of (estaciones) [who]]
;    [
;      set color blue
;      create-link-to estacion (who + 1);(if max-one-of );([ifelse  (max-one-of (estaciones) [who]) = true [1][who + 1]])
;    ]
;  ]
  ask min-one-of (portales) [who]
  [create-link-to min-one-of (estaciones) [who]]
;  ask max-one-of (portales) [who]
;  [create-link-to max-one-of (estaciones) [who]]



  ;]
end

;;;;;;;;;;;;;;;;;;;;;;; GO ;;;;;;;;;;;;;;;;;;;;;;

to go
;  ask transmilenio [mover-transmi-from-portal]
  ask transmilenio [mover-transmi-from-stop]
  ask people [move-people]
  tick
end

to move-people
;  ask people
;    [
      let vertex-to-move min-one-of (vertices) [distance myself]
      move-to vertex-to-move
;    ]
end


to mover-transmi-from-portal

    if any? portales-on patch-here = true
    [
      let who.origen item 0 [who] of vertices-on patch-here
      set next.stop item 0 [end2] of links with [end1 = vertex who.origen and capacity = 1]
      let next.stop_x [xcor] of next.stop
      let next.stop_y [ycor] of next.stop
      facexy next.stop_x next.stop_y fd distance next.stop
      set last.stop vertex who.origen
  ]
end

to mover-transmi-from-stop
 
  let who.origen item 0 [who] of vertices-on patch-here ;::: AQUI VOY ::::::::::
  set origen.stop vertex who.origen
  let id.origen.stop origen.stop
  set last.stop id.origen.stop
  let last_stop last.stop
  set last.link edge 12 125
  let last_link last.link
  
  ifelse any? portales-on patch-here = true
    [
;      let who.origen item 0 [who] of vertices-on patch-here
      set next.stop item 0 [end2] of links with [end1 = id.origen.stop and capacity = 1]
      set options.stop  [end2] of links with [end1 = id.origen.stop and capacity = 1]
      let next.stop_x [xcor] of next.stop
      let next.stop_y [ycor] of next.stop
      facexy next.stop_x next.stop_y fd distance next.stop
      set last.stop origen.stop
      set origen.stop next.stop
      set last.link edge [who] of origen.stop [who] of last.stop 
     ]
  
  ;;;;; inicio nuevo codigo ;;;;;;;;
  
  [
    ifelse edges with [end1 = id.origen.stop ] != 0 
    [
      set options.stop [self] of links with [end1 = id.origen.stop]
      ifelse item 0 options.stop != last.link
      [
        set next.stop item 0 [end2] of links with [end1 = id.origen.stop]
        let next.stop_x [xcor] of next.stop
      let next.stop_y [ycor] of next.stop
      facexy next.stop_x next.stop_y fd distance next.stop
      set last.stop origen.stop
      set origen.stop next.stop
        set last.link edge [who] of id.origen.stop [who] of next.stop
      ]  
      [
        set next.stop item 1 [end2] of links with [end1 = id.origen.stop]
        let next.stop_x [xcor] of next.stop
      let next.stop_y [ycor] of next.stop
      facexy next.stop_x next.stop_y fd distance next.stop
      set last.stop origen.stop
      set origen.stop next.stop
        set last.link edge [who] of id.origen.stop [who] of next.stop
      ]      
    ] 
    [
      if any? links with [end2 = id.origen.stop]
      [
        set options.stop [self] of links with [end2 = id.origen.stop]
        
        ifelse item 0 options.stop != last.link
        [
          set next.stop item 0 [end1] of links with [end2 = id.origen.stop ]
          set last.link edge [who] of id.origen.stop [who] of next.stop
        ]
        [
          set next.stop item 1 [end1] of links with [end2 = id.origen.stop]
          set last.link edge [who] of id.origen.stop [who] of next.stop
        ]               
      ]
    ]
  ]
  
  
  ;;;;; fin nuevo codigo ;;;;;;;;
  
  
  
;  [
;  ifelse any? links with [end1 = id.origen.stop and item 0 [end2] of links with [end1 = id.origen.stop ] != last_stop ] ; 
;  [
;    set next.stop item 0 [end2] of links with [end1 = id.origen.stop ]
;      set first.end [end1] of links with [end1 = id.origen.stop ]
;      set second.end [end2] of links with [end1 = id.origen.stop ]
;      set last.link1 link item 0 first.end item 0 second.end 
;      set last.link2 link item 1 first.end item 1 second.end 
;    set last.link link [who] of id.origen.stop [who] of next.stop  
;    set options.stop  [end2] of links with [end1 = id.origen.stop]
;    let next.stop_x [xcor] of next.stop
;    let next.stop_y [ycor] of next.stop
;    facexy next.stop_x next.stop_y fd distance next.stop
;      set last_stop origen.stop
;      set origen.stop next.stop
;;      set last_stop id.origen.stop
;  ]
;  
;    [
;  if any? links with [end2 = id.origen.stop and end1 != last_stop ]
;  [
;    set next.stop item 0 [end1] of links with [end2 = id.origen.stop ]
;        set first.end [end1] of links with [end1 = id.origen.stop ]
;      set second.end [end2] of links with [end1 = id.origen.stop ]
;      set last.link1 link item 0 first.end item 0 second.end 
;      set last.link2 link item 1 first.end item 1 second.end
;        
;        set last.link link [who] of id.origen.stop [who] of next.stop 
;    let options.link links with [end2 = id.origen.stop ]
;    print options.link    
;    set options.stop [end1] of links with [end2 = id.origen.stop] 
;    let next.stop_x [xcor] of next.stop
;    let next.stop_y [ycor] of next.stop
;    facexy next.stop_x next.stop_y fd distance next.stop
;        set last_stop origen.stop
;      set origen.stop next.stop
;;        set last_stop id.origen.stop
;  ]
;  ]
;  ]
;   set last_stop origen.stop;min-one-of (estaciones) [distance myself]

end