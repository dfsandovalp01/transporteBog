
;;;;;;;;;;;;;;;
;; FUNCTIONS ;;
;;;;;;;;;;;;;;;


to setup
  clear-all
  setup-importer
  setup-portales
;  setup-estaciones
  setup-transmilenio
  setup-people
;  crear-vias
  
  reset-ticks
end

to setup-portales
  create-portales 1 [
    set shape "house"
    set color green
    set xcor [xcor] of vertex 30
    set ycor [ycor] of vertex 30
  ]
end

to setup-estaciones
  create-estaciones 5 [
    set shape "circle"
    set color white
    set size 0.2
    set xcor random-xcor
    set ycor random-ycor
  ]
end

to setup-transmilenio
  create-transmilenio 3 [
    setxy [xcor] of portal 151 [ycor] of portal 151;random-xcor random-ycor
    let vertex-to-move min-one-of (portales) [distance myself]
    set shape "truck"
    set color red
    set last_stop vertex-to-move
;   set last-vertex vertex-to-move
    move-to vertex-to-move
    ]

end

to setup-people
  create-people 3 [
    setxy random-xcor random-ycor
    set shape "person"
    set color white
    
  ]
end

to crear-vias
  ask estaciones;(min-one-of (estaciones) [who])
  [ifelse who < [who] of max-one-of (estaciones) [who]
    [
      set color blue
      create-link-to estacion (who + 1);(if max-one-of );([ifelse  (max-one-of (estaciones) [who]) = true [1][who + 1]])
    ]
    [
      create-link-to portal 1
    ]
  set name-troncal "nacional"
  ]
;  [while [who < [who] of max-one-of (estaciones) [who]]
;    [
;      set color blue
;      create-link-to estacion (who + 1);(if max-one-of );([ifelse  (max-one-of (estaciones) [who]) = true [1][who + 1]])
;    ]
;  ]
  ask min-one-of (portales) [who]
  [create-link-to min-one-of (estaciones) [who]]
;  ask max-one-of (portales) [who]
;  [create-link-to max-one-of (estaciones) [who]]



  ;]
end

;;;;;;;;;;;;;;;;;;;;;;; GO ;;;;;;;;;;;;;;;;;;;;;;

to go
;  ask transmilenio [mover-transmi-from-portal]
  ask transmilenio [mover-transmi-from-stop]
  ask people [move-people]
  tick
end

to move-people
;  ask people
;    [
      let vertex-to-move min-one-of (vertices) [distance myself]
      move-to vertex-to-move
;    ]
end


to mover-transmi-from-portal
;  ask transmilenio
;  [
    if any? portales-on patch-here = true
    [
      let who.origen item 0 [who] of portales-on patch-here
      let next.stop item 0 [end2] of links with [end1 = portal who.origen]
      let next.stop_x [xcor] of next.stop
      let next.stop_y [ycor] of next.stop
      facexy next.stop_x next.stop_y fd distance next.stop
      set last_stop portal who.origen
;      move-to item 0 [end2] of links with [end1 = portal destino.norte]  fd 0.2
;    ]
;    [ifelse any? portales-on patch-here = true
;      [ifelse transmilenio-on portal 0 = true
;        [move-to estacion 1 fd 1]
;        [move-to item 0 [end2] of links with [end1 = portal 0] 
;        set last_vertex min-one-of (estaciones) [distance myself]]
      ]
;  ;    [ifelse any? estaciones-on patch-here = true
;  ;      [while [[who] of portales-on patch-here <  ]]
;      [];; condicion si falso
    
  ;    ]

;    ]
  
;  [let estacion-to-move min-one-of (estaciones) [distance myself]
;    face estacion-to-move fd 0.5]
;    move-to estacion-to-move ]
end

to mover-transmi-from-stop
;  ask transmilenio 
;  [
;    if any? estaciones-on patch-here = true 
;      [
        let who.origen item 0 [who] of vertices-on patch-here
        let next.stop item 0 [end2] of links with [end1 = vertex who.origen]
        let next.stop_x [xcor] of next.stop
        let next.stop_y [ycor] of next.stop
        facexy next.stop_x next.stop_y fd distance next.stop
;        let destino.norte item 0 [who] of estaciones-on patch-here
;        move-to item 0 [end2] of links with [end1 = estacion destino.norte]
        set last_stop vertex who.origen;min-one-of (estaciones) [distance myself]
;      ]  
;  ]
end