{
library(openxlsx)
library(tidyr)
library(dplyr)
library(splitstackshape)
library(readr)
#library(tm)
library(lubridate)
library(rowr)
library(igraph)
library(networkD3)
library(tidyverse)
library(viridis)
}
#### IMPORTANDO DATOS Y DERIVANDO ESTACIONES, PORTALES Y CONECTORES(ORIGENES) ####
{
# edges1 <- read.csv("/home/dfsandovalp/WORK/transporteBog/streets/edges (copia).csv", header = F)  %>%
edges1 <- read.csv("/home/dfsandovalp/WORK/transporteBog/version_1/base/edges.csv", header = F)  %>%
mutate(#V6 = paste(V2,"-",V3, sep = ""),
#V7 = paste(V3,"-",V2, sep = ""),
V2 = as.character(V2),
V3 = as.character(V3)) %>%
filter(V5 == 9) %>%
mutate(V5 = 4)
#Graficando
links.troncales <- edges1 %>%
mutate(source = V2,
target = V3) %>%
select(source, target)
names(links.troncales) = c("source", "target")
network.1 <- graph_from_data_frame(d=links.troncales, directed=T)
# plot it
plot(network.1, vertex.size=5,vertex.label.dist=0,vertex.label.cex=0.5,edge.arrow.size=.2)
count.vert1 <- edges1[3]
names(count.vert1) = c("V2")
count.vert <- edges1[2] %>% ###conteo de vertices
rbind(count.vert1) %>%
group_by(V2) %>%
summarise(SUMA = n())
# Tabla con origenes (ejes con conteo)
conect.wit <- edges1 %>%
left_join(count.vert, by = c("V2")) %>%
left_join(count.vert, by = c("V3" = "V2"))
# Origenes *(Puntos union entre troncales)
origenes <- conect.wit %>%
filter(SUMA.x > 2) %>%
rbind(filter(conect.wit, SUMA.y >2)) %>%
mutate(ori1 = ifelse(SUMA.x > 2, V2, V3),
ori2 = ifelse(ori1 == V2, V3, V2)) %>%
select(ori1, ori2) %>%
distinct() %>%
arrange(ori1)
origenes.comp <-  conect.wit %>%
filter(V2 == origenes[1,1] & V3 == origenes[1,2] | V2 == origenes[1,2] & V3 == origenes[1,1] )
for (i in 2:nrow(origenes)){
k <- conect.wit %>%
filter(V2 == origenes[i,1] & V3 == origenes[i,2] | V2 == origenes[i,2] & V3 == origenes[i,1] )
origenes.comp <- origenes.comp %>%
rbind(k)
}
# Portales
portales <-  conect.wit %>%
filter(SUMA.x == 1) %>%
rbind(filter(conect.wit, SUMA.y == 1)) %>%
mutate(port = ifelse(SUMA.x == 1, V2, V3)) %>%
select(port) %>%
distinct() %>%
add_rownames()
# Estaciones
estaciones <- conect.wit %>%
filter(SUMA.x < 3) %>%
rbind(filter(conect.wit, SUMA.y < 3)) %>%
mutate(stop = ifelse(SUMA.x < 3, V2, V3)) %>%
select(stop) %>%
distinct()
} #FIN DERIVACION ELEMENTOS
{
library(openxlsx)
library(tidyr)
library(dplyr)
library(splitstackshape)
library(readr)
#library(tm)
library(lubridate)
library(rowr)
library(igraph)
library(networkD3)
library(tidyverse)
library(viridis)
}
#### IMPORTANDO DATOS Y DERIVANDO ESTACIONES, PORTALES Y CONECTORES(ORIGENES) ####
{
# edges1 <- read.csv("/home/dfsandovalp/WORK/transporteBog/streets/edges (copia).csv", header = F)  %>%
edges1 <- read.csv("/home/dfsandovalp/WORK/transporteBog/version_1/base/edges.csv", header = F)  %>%
mutate(#V6 = paste(V2,"-",V3, sep = ""),
#V7 = paste(V3,"-",V2, sep = ""),
V2 = as.character(V2),
V3 = as.character(V3)) %>%
filter(V5 == 9) %>%
mutate(V5 = 4)
#Graficando
links.troncales <- edges1 %>%
mutate(source = V2,
target = V3) %>%
select(source, target)
names(links.troncales) = c("source", "target")
network.1 <- graph_from_data_frame(d=links.troncales, directed=T)
# plot it
plot(network.1, vertex.size=5,vertex.label.dist=0,vertex.label.cex=0.5,edge.arrow.size=.2)
count.vert1 <- edges1[3]
names(count.vert1) = c("V2")
count.vert <- edges1[2] %>% ###conteo de vertices
rbind(count.vert1) %>%
group_by(V2) %>%
summarise(SUMA = n())
# Tabla con origenes (ejes con conteo)
conect.wit <- edges1 %>%
left_join(count.vert, by = c("V2")) %>%
left_join(count.vert, by = c("V3" = "V2"))
# Origenes *(Puntos union entre troncales)
origenes <- conect.wit %>%
filter(SUMA.x > 2) %>%
rbind(filter(conect.wit, SUMA.y >2)) %>%
mutate(ori1 = ifelse(SUMA.x > 2, V2, V3),
ori2 = ifelse(ori1 == V2, V3, V2)) %>%
select(ori1, ori2) %>%
distinct() %>%
arrange(ori1)
origenes.comp <-  conect.wit %>%
filter(V2 == origenes[1,1] & V3 == origenes[1,2] | V2 == origenes[1,2] & V3 == origenes[1,1] )
for (i in 2:nrow(origenes)){
k <- conect.wit %>%
filter(V2 == origenes[i,1] & V3 == origenes[i,2] | V2 == origenes[i,2] & V3 == origenes[i,1] )
origenes.comp <- origenes.comp %>%
rbind(k)
}
# Portales
portales <-  conect.wit %>%
filter(SUMA.x == 1) %>%
rbind(filter(conect.wit, SUMA.y == 1)) %>%
mutate(port = ifelse(SUMA.x == 1, V2, V3)) %>%
select(port) %>%
distinct() %>%
add_rownames()
# Estaciones
estaciones <- conect.wit %>%
filter(SUMA.x < 3) %>%
rbind(filter(conect.wit, SUMA.y < 3)) %>%
mutate(stop = ifelse(SUMA.x < 3, V2, V3)) %>%
select(stop) %>%
distinct()
} #FIN DERIVACION ELEMENTOS
